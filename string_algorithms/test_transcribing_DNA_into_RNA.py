import pytest
from pytest_benchmark.fixture import BenchmarkFixture

# method 1
# iterate through the DNA sequence and replace 'T' with 'U'
# return the RNA sequence
# TC: O(N), SC: O(N) since we are storing the RNA sequence
# * This is the best solution for me currently
def transcribing_DNA_into_RNA_1(dna: str) -> str:
    """
    Transcribe a DNA sequence into RNA by replacing 'T' with 'U'.

    Parameters:
    dna (str): DNA sequence.

    Returns:
    str: RNA sequence.
    """
    return dna.replace("T", "U")

# method 2
# iterate through the DNA sequence
# replace 'T' with 'U'
# return the RNA sequence
# TC: O(N), SC: O(N) since we are storing the RNA sequence
def transcribing_DNA_into_RNA_2(dna: str) -> str:
    """
    Transcribe a DNA sequence into RNA by replacing 'T' with 'U'.

    Parameters:
    dna (str): DNA sequence.

    Returns:
    str: RNA sequence.
    """
    rna = ''
    for base in dna:
        if base == 'T':
            rna += 'U'
        else:
            rna += base
    return rna

dna: str = "TACCTATGAGACTCCCCTAAAGCGCGACAAGAGCGCACGATTAGAGTACAGCGACGAATACGTCAGTCGTGAGAGTTATCCTGTCAAGATGATCTTTCGACACCTACCAGCGGGGACACTCTAGAAGGGGGGGCACCGTTCGACAGCCCTCCCTCGAGGCCTGGCCTCTCGGACAGTTTGTTCTTGATCTCTTCCTATACTTTCGTTTGACCCTAACTTCCGTGGGCCTCTCTGACCATTAGAGGCTTTCAGCGGGTCCTAAGCAACGGGCACCGACTAAAAGGTCTTGCTAGCGAAGTGGGCCCAACCGAATGAGAGCTTAATCTCGGGTTAACTAGGGTCAAGAGGAGCCAAGTCCGCCGACAGGGCACACTCTCTTACTAGGCAGACATGCTGAGCTGCGGCGCCCATGTTCATAGTGCCTGCTCCCATCTGGATAGTCAAGCCATCGCCAAAAGCGATACTGGTGTGGCGCAAACGCGCCTCATTACCCCTAGATGAGAGCAGCATACTATTGGCTCTACTTGATATTTATACCGTGTTCCCGATTATGTTCCCTCTTATATCCGTTCCCGCATGTAGAAATCCATTGCAACAAGTGACCTTTCCGAGCGTGACCGTTGTTACAGGCCATTTAACTTCTATCCTGGTCGGTACTATATGCTTATTCTTTGAGTTGATGGGCACCTCATGTGTACACAGGAAATGCTGTTATGAGCAAGAGCAGTCCGGCTACGGAAAATGTCGCTCACTAAGCCTTACGAGATTGGCTTTACAGCCTGTTCTAAGCGCTGACGAAGAGATGCTCCGTCCATCCGTCCCATCGACCCGGGGAACTTCCGTAAGTTACTGAAAGGGGATTGCGGTGCCACCAATGTGACATCTGTTGGACGCCGAACGTCCGGGCAATATCCATATGAGATATGTCGCCAGCCTTAGCCGTCCTGGTAGTAATATTCTCCAGTGTTCAGTCGG"

rna: str = "UACCUAUGAGACUCCCCUAAAGCGCGACAAGAGCGCACGAUUAGAGUACAGCGACGAAUACGUCAGUCGUGAGAGUUAUCCUGUCAAGAUGAUCUUUCGACACCUACCAGCGGGGACACUCUAGAAGGGGGGGCACCGUUCGACAGCCCUCCCUCGAGGCCUGGCCUCUCGGACAGUUUGUUCUUGAUCUCUUCCUAUACUUUCGUUUGACCCUAACUUCCGUGGGCCUCUCUGACCAUUAGAGGCUUUCAGCGGGUCCUAAGCAACGGGCACCGACUAAAAGGUCUUGCUAGCGAAGUGGGCCCAACCGAAUGAGAGCUUAAUCUCGGGUUAACUAGGGUCAAGAGGAGCCAAGUCCGCCGACAGGGCACACUCUCUUACUAGGCAGACAUGCUGAGCUGCGGCGCCCAUGUUCAUAGUGCCUGCUCCCAUCUGGAUAGUCAAGCCAUCGCCAAAAGCGAUACUGGUGUGGCGCAAACGCGCCUCAUUACCCCUAGAUGAGAGCAGCAUACUAUUGGCUCUACUUGAUAUUUAUACCGUGUUCCCGAUUAUGUUCCCUCUUAUAUCCGUUCCCGCAUGUAGAAAUCCAUUGCAACAAGUGACCUUUCCGAGCGUGACCGUUGUUACAGGCCAUUUAACUUCUAUCCUGGUCGGUACUAUAUGCUUAUUCUUUGAGUUGAUGGGCACCUCAUGUGUACACAGGAAAUGCUGUUAUGAGCAAGAGCAGUCCGGCUACGGAAAAUGUCGCUCACUAAGCCUUACGAGAUUGGCUUUACAGCCUGUUCUAAGCGCUGACGAAGAGAUGCUCCGUCCAUCCGUCCCAUCGACCCGGGGAACUUCCGUAAGUUACUGAAAGGGGAUUGCGGUGCCACCAAUGUGACAUCUGUUGGACGCCGAACGUCCGGGCAAUAUCCAUAUGAGAUAUGUCGCCAGCCUUAGCCGUCCUGGUAGUAAUAUUCUCCAGUGUUCAGUCGG"

def test_transcribing_DNA_into_RNA_1():
    assert transcribing_DNA_into_RNA_1(dna) == rna

def test_transcribing_DNA_into_RNA_2():
    assert transcribing_DNA_into_RNA_2(dna) == rna

@pytest.mark.benchmark(group='transcribing_DNA_into_RNA')
def test_benchmark_transcribing_DNA_into_RNA_1(benchmark: BenchmarkFixture):
    benchmark(transcribing_DNA_into_RNA_1, dna)

@pytest.mark.benchmark(group='transcribing_DNA_into_RNA')
def test_benchmark_transcribing_DNA_into_RNA_2(benchmark: BenchmarkFixture):
    benchmark(transcribing_DNA_into_RNA_2, dna)

if __name__ == '__main__':
    pytest.main()